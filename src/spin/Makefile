# Makefile.in generated by automake 1.11 from Makefile.am.
# src/spin/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





pkgdatadir = $(datadir)/spinframework
pkgincludedir = $(includedir)/spinframework
pkglibdir = $(libdir)/spinframework
pkglibexecdir = $(libexecdir)/spinframework
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i386-apple-darwin9.8.0
host_triplet = i386-apple-darwin9.8.0
bin_PROGRAMS = spinServer$(EXEEXT) spinViewer$(EXEEXT)
subdir = src/spin
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/acx_pthread.m4 \
	$(top_srcdir)/m4/ax_boost_base.m4 \
	$(top_srcdir)/m4/ax_boost_filesystem.m4 \
	$(top_srcdir)/m4/ax_boost_regex.m4 \
	$(top_srcdir)/m4/ax_boost_thread.m4 \
	$(top_srcdir)/m4/ax_check_gl.m4 \
	$(top_srcdir)/m4/ax_check_glu.m4 \
	$(top_srcdir)/m4/ax_check_glut.m4 \
	$(top_srcdir)/m4/ax_lang_compiler_ms.m4 \
	$(top_srcdir)/m4/ax_python.m4 $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/include/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)"
LTLIBRARIES = $(lib_LTLIBRARIES)
libSPIN_la_DEPENDENCIES =  \
	$(top_srcdir)/src/osgWrappers/libSPINwrappers.la \
	$(top_srcdir)/src/tinyxml/libtinyxml.la
am_libSPIN_la_OBJECTS = libSPIN_la-spinContext.lo \
	libSPIN_la-osgUtil.lo libSPIN_la-spinUtil.lo \
	libSPIN_la-libloUtil.lo libSPIN_la-SceneManager.lo \
	libSPIN_la-MediaManager.lo libSPIN_la-ViewerManipulator.lo \
	libSPIN_la-ReferencedNode.lo libSPIN_la-ReferencedState.lo \
	libSPIN_la-UserNode.lo libSPIN_la-GroupNode.lo \
	libSPIN_la-ShapeNode.lo libSPIN_la-ModelNode.lo \
	libSPIN_la-GridNode.lo libSPIN_la-LightSource.lo \
	libSPIN_la-RayNode.lo libSPIN_la-Contour.lo \
	libSPIN_la-ConstraintsNode.lo libSPIN_la-PointerNode.lo \
	libSPIN_la-MeasurementNode.lo libSPIN_la-AnimationNode.lo \
	libSPIN_la-SwitchNode.lo libSPIN_la-TextNode.lo \
	libSPIN_la-DSPNode.lo libSPIN_la-SoundNode.lo \
	libSPIN_la-SoundSpace.lo libSPIN_la-Listener.lo \
	libSPIN_la-SoundConnection.lo libSPIN_la-VideoTexture.lo \
	libSPIN_la-SharedVideoTexture.lo
libSPIN_la_OBJECTS = $(am_libSPIN_la_OBJECTS)
libSPIN_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(libSPIN_la_LDFLAGS) $(LDFLAGS) -o $@
PROGRAMS = $(bin_PROGRAMS)
am_spinServer_OBJECTS = spinServer.$(OBJEXT)
spinServer_OBJECTS = $(am_spinServer_OBJECTS)
spinServer_DEPENDENCIES = $(top_srcdir)/src/spin/libSPIN.la
am_spinViewer_OBJECTS = spinViewer.$(OBJEXT)
spinViewer_OBJECTS = $(am_spinViewer_OBJECTS)
spinViewer_LDADD = $(LDADD)
spinViewer_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(spinViewer_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(top_builddir)/include
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libSPIN_la_SOURCES) $(spinServer_SOURCES) \
	$(spinViewer_SOURCES)
DIST_SOURCES = $(libSPIN_la_SOURCES) $(spinServer_SOURCES) \
	$(spinViewer_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /Users/zack/svn/spinframework/missing --run aclocal-1.11
AMTAR = ${SHELL} /Users/zack/svn/spinframework/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /Users/zack/svn/spinframework/missing --run autoconf
AUTOHEADER = ${SHELL} /Users/zack/svn/spinframework/missing --run autoheader
AUTOMAKE = ${SHELL} /Users/zack/svn/spinframework/missing --run automake-1.11
AWK = awk
BOOST_CPPFLAGS = -pthread -I/opt/local/include
BOOST_FILESYSTEM_LIB = -lboost_filesystem-mt
BOOST_LDFLAGS = -L/opt/local/lib
BOOST_REGEX_LIB = -lboost_regex-mt
BOOST_THREAD_LIB = -lboost_thread-mt
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS =  -I/opt/local/include
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DSYMUTIL = dsymutil
DUMPBIN = 
ECHO_C = \c
ECHO_N = 
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
FGREP = /usr/bin/grep -F
GLUT_CFLAGS = 
GLUT_LIBS = 
GLU_CFLAGS = -I/usr/X11/include -D_THREAD_SAFE 
GLU_LIBS = -lGLU -lGL -L/usr/X11/lib -lX11  -lm
GL_CFLAGS = -I/usr/X11/include -D_THREAD_SAFE 
GL_LIBS = -lGL -L/usr/X11/lib -lX11  -lm
GREP = /usr/bin/grep
INSTALL = /opt/local/bin/ginstall -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/libexec/gcc/i686-apple-darwin9/4.0.1/ld
LDFLAGS =  -L/opt/local/lib -L/usr/local/lib
LIBLO_LDFLAGS = -llo
LIBOBJS =  ${LIBOBJDIR}error$U.o
LIBS = -lm 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = lipo
LN_S = ln -s
LTLIBOBJS =  ${LIBOBJDIR}error$U.lo
MAKEINFO = ${SHELL} /Users/zack/svn/spinframework/missing --run makeinfo
MKDIR_P = /opt/local/bin/gmkdir -p
NM = /usr/bin/nm -p
NMEDIT = nmedit
OBJDUMP = false
OBJEXT = o
OSGINTROSPECTION_LIB = -losgIntrospection
OTOOL = otool
OTOOL64 = :
OpenSceneGraph_CFLAGS = -I/usr/local/include  
OpenSceneGraph_LIBS = -L/usr/local/lib -losg -losgDB -losgFX -losgGA -losgParticle -losgSim -losgText -losgUtil -losgTerrain -losgManipulator -losgViewer -losgWidget -losgShadow -losgAnimation -losgVolume -lOpenThreads  
PACKAGE = spinframework
PACKAGE_BUGREPORT = 
PACKAGE_NAME = SPINFramework
PACKAGE_STRING = SPINFramework 0.2
PACKAGE_TARNAME = spinframework
PACKAGE_URL = 
PACKAGE_VERSION = 0.2
PATH_SEPARATOR = :
PKG_CONFIG = /opt/local/bin/pkg-config
PTHREAD_CC = gcc
PTHREAD_CFLAGS = -D_THREAD_SAFE 
PTHREAD_LIBS = 
PYTHON_BIN = python2.5
PYTHON_INCLUDE_DIR = /usr/include/python2.5
PYTHON_LIB = python2.5
RANLIB = ranlib
SED = /usr/bin/sed
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
VERSION = 0.2
XMKMF = 
XML_CFLAGS = -I/opt/local/include/libxml2  
XML_LIBS = -L/opt/local/lib -lxml2 -lpthread -lz -liconv -lm  
X_CFLAGS =  -I/usr/X11/include
X_EXTRA_LIBS = 
X_LIBS =  -L/usr/X11/lib -R/usr/X11/lib
X_PRE_LIBS =  -lSM -lICE
abs_builddir = /Users/zack/svn/spinframework/src/spin
abs_srcdir = /Users/zack/svn/spinframework/src/spin
abs_top_builddir = /Users/zack/svn/spinframework
abs_top_srcdir = /Users/zack/svn/spinframework
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
acx_pthread_config = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i386-apple-darwin9.8.0
build_alias = 
build_cpu = i386
build_os = darwin9.8.0
build_vendor = apple
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i386-apple-darwin9.8.0
host_alias = 
host_cpu = i386
host_os = darwin9.8.0
host_vendor = apple
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /Users/zack/svn/spinframework/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = /bin/echo
mandir = ${datarootdir}/man
mkdir_p = /opt/local/bin/gmkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
AM_CPPFLAGS = $(all_includes) -I$(top_srcdir)/src/tinyxml

#INCLUDES = -I$(top_srcdir)/src/tinyxml

# use lib_LTLIBRARIES to build a shared lib:
lib_LTLIBRARIES = libSPIN.la
libSPIN_la_CPPFLAGS = \
	$(AM_CPPFLAGS) 

libSPIN_la_LIBADD = \
	$(top_srcdir)/src/osgWrappers/libSPINwrappers.la \
	$(top_srcdir)/src/tinyxml/libtinyxml.la


#$(top_srcdir)/src/osgWrappers/libSPINwrappers.a \
#$(top_srcdir)/src/tinyxml/libtinyxml.a
libSPIN_la_LDFLAGS = \
	$(BOOST_LDFLAGS) \
	$(BOOST_FILESYSTEM_LIB) \
	-lOpenThreads -losg \
	-losgGA -losgSim -losgDB -losgManipulator -losgText -losgUtil \
	-losgFX -losgParticle -losgViewer \
	$(OSGINTROSPECTION_LIB) $(LIBLO_LDFLAGS)

libSPIN_la_SOURCES = \
	spinContext.cpp osgUtil.cpp spinUtil.cpp libloUtil.cpp \
	SceneManager.cpp MediaManager.cpp ViewerManipulator.cpp \
	ReferencedNode.cpp ReferencedState.cpp \
	UserNode.cpp GroupNode.cpp ShapeNode.cpp ModelNode.cpp \
	GridNode.cpp LightSource.cpp RayNode.cpp Contour.cpp \
	ConstraintsNode.cpp PointerNode.cpp MeasurementNode.cpp \
	AnimationNode.cpp SwitchNode.cpp TextNode.cpp \
	DSPNode.cpp SoundNode.cpp SoundSpace.cpp Listener.cpp SoundConnection.cpp \
	VideoTexture.cpp SharedVideoTexture.cpp

#bin_PROGRAMS = spinServer spinViewer spin

#AM_LDFLAGS = -llo

#  OSG_LIBS += -lc -lm -ldl -lGL -lX11 -lpthread \
#  -lOpenThreads -losg -losgGA -losgSim -losgDB -losgIntrospection \
# -losgManipulator -losgText -losgUtil -losgFX -losgParticle -losgViewer
spinServer_SOURCES = spinServer.cpp
#spinServer_LDADD = $(top_srcdir)/src/spin/libSPIN.so
#spinServer_LDADD = -lSPIN
spinServer_LDADD = $(top_srcdir)/src/spin/libSPIN.la
#spinServer_LDADD = -lSPIN -lOpenThreads -losg -losgGA -losgSim -losgDB -losgManipulator -losgText -losgUtil -losgFX -losgParticle -losgViewer $(OSGINTROSPECTION_LIB) $(LIBLO_LIB)
spinViewer_SOURCES = spinViewer.cpp
#spinViewer_LDADD = $(top_srcdir)/src/spin/libSPIN.so
spinViewer_LDFLAGS = -lSPIN
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/spin/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/spin/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
	}

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libSPIN.la: $(libSPIN_la_OBJECTS) $(libSPIN_la_DEPENDENCIES) 
	$(libSPIN_la_LINK) -rpath $(libdir) $(libSPIN_la_OBJECTS) $(libSPIN_la_LIBADD) $(LIBS)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p || test -f $$p1; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
spinServer$(EXEEXT): $(spinServer_OBJECTS) $(spinServer_DEPENDENCIES) 
	@rm -f spinServer$(EXEEXT)
	$(CXXLINK) $(spinServer_OBJECTS) $(spinServer_LDADD) $(LIBS)
spinViewer$(EXEEXT): $(spinViewer_OBJECTS) $(spinViewer_DEPENDENCIES) 
	@rm -f spinViewer$(EXEEXT)
	$(spinViewer_LINK) $(spinViewer_OBJECTS) $(spinViewer_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/libSPIN_la-AnimationNode.Plo
include ./$(DEPDIR)/libSPIN_la-ConstraintsNode.Plo
include ./$(DEPDIR)/libSPIN_la-Contour.Plo
include ./$(DEPDIR)/libSPIN_la-DSPNode.Plo
include ./$(DEPDIR)/libSPIN_la-GridNode.Plo
include ./$(DEPDIR)/libSPIN_la-GroupNode.Plo
include ./$(DEPDIR)/libSPIN_la-LightSource.Plo
include ./$(DEPDIR)/libSPIN_la-Listener.Plo
include ./$(DEPDIR)/libSPIN_la-MeasurementNode.Plo
include ./$(DEPDIR)/libSPIN_la-MediaManager.Plo
include ./$(DEPDIR)/libSPIN_la-ModelNode.Plo
include ./$(DEPDIR)/libSPIN_la-PointerNode.Plo
include ./$(DEPDIR)/libSPIN_la-RayNode.Plo
include ./$(DEPDIR)/libSPIN_la-ReferencedNode.Plo
include ./$(DEPDIR)/libSPIN_la-ReferencedState.Plo
include ./$(DEPDIR)/libSPIN_la-SceneManager.Plo
include ./$(DEPDIR)/libSPIN_la-ShapeNode.Plo
include ./$(DEPDIR)/libSPIN_la-SharedVideoTexture.Plo
include ./$(DEPDIR)/libSPIN_la-SoundConnection.Plo
include ./$(DEPDIR)/libSPIN_la-SoundNode.Plo
include ./$(DEPDIR)/libSPIN_la-SoundSpace.Plo
include ./$(DEPDIR)/libSPIN_la-SwitchNode.Plo
include ./$(DEPDIR)/libSPIN_la-TextNode.Plo
include ./$(DEPDIR)/libSPIN_la-UserNode.Plo
include ./$(DEPDIR)/libSPIN_la-VideoTexture.Plo
include ./$(DEPDIR)/libSPIN_la-ViewerManipulator.Plo
include ./$(DEPDIR)/libSPIN_la-libloUtil.Plo
include ./$(DEPDIR)/libSPIN_la-osgUtil.Plo
include ./$(DEPDIR)/libSPIN_la-spinContext.Plo
include ./$(DEPDIR)/libSPIN_la-spinUtil.Plo
include ./$(DEPDIR)/spinServer.Po
include ./$(DEPDIR)/spinViewer.Po

.cpp.o:
	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

libSPIN_la-spinContext.lo: spinContext.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-spinContext.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-spinContext.Tpo -c -o libSPIN_la-spinContext.lo `test -f 'spinContext.cpp' || echo '$(srcdir)/'`spinContext.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-spinContext.Tpo $(DEPDIR)/libSPIN_la-spinContext.Plo
#	source='spinContext.cpp' object='libSPIN_la-spinContext.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-spinContext.lo `test -f 'spinContext.cpp' || echo '$(srcdir)/'`spinContext.cpp

libSPIN_la-osgUtil.lo: osgUtil.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-osgUtil.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-osgUtil.Tpo -c -o libSPIN_la-osgUtil.lo `test -f 'osgUtil.cpp' || echo '$(srcdir)/'`osgUtil.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-osgUtil.Tpo $(DEPDIR)/libSPIN_la-osgUtil.Plo
#	source='osgUtil.cpp' object='libSPIN_la-osgUtil.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-osgUtil.lo `test -f 'osgUtil.cpp' || echo '$(srcdir)/'`osgUtil.cpp

libSPIN_la-spinUtil.lo: spinUtil.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-spinUtil.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-spinUtil.Tpo -c -o libSPIN_la-spinUtil.lo `test -f 'spinUtil.cpp' || echo '$(srcdir)/'`spinUtil.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-spinUtil.Tpo $(DEPDIR)/libSPIN_la-spinUtil.Plo
#	source='spinUtil.cpp' object='libSPIN_la-spinUtil.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-spinUtil.lo `test -f 'spinUtil.cpp' || echo '$(srcdir)/'`spinUtil.cpp

libSPIN_la-libloUtil.lo: libloUtil.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-libloUtil.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-libloUtil.Tpo -c -o libSPIN_la-libloUtil.lo `test -f 'libloUtil.cpp' || echo '$(srcdir)/'`libloUtil.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-libloUtil.Tpo $(DEPDIR)/libSPIN_la-libloUtil.Plo
#	source='libloUtil.cpp' object='libSPIN_la-libloUtil.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-libloUtil.lo `test -f 'libloUtil.cpp' || echo '$(srcdir)/'`libloUtil.cpp

libSPIN_la-SceneManager.lo: SceneManager.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-SceneManager.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-SceneManager.Tpo -c -o libSPIN_la-SceneManager.lo `test -f 'SceneManager.cpp' || echo '$(srcdir)/'`SceneManager.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-SceneManager.Tpo $(DEPDIR)/libSPIN_la-SceneManager.Plo
#	source='SceneManager.cpp' object='libSPIN_la-SceneManager.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-SceneManager.lo `test -f 'SceneManager.cpp' || echo '$(srcdir)/'`SceneManager.cpp

libSPIN_la-MediaManager.lo: MediaManager.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-MediaManager.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-MediaManager.Tpo -c -o libSPIN_la-MediaManager.lo `test -f 'MediaManager.cpp' || echo '$(srcdir)/'`MediaManager.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-MediaManager.Tpo $(DEPDIR)/libSPIN_la-MediaManager.Plo
#	source='MediaManager.cpp' object='libSPIN_la-MediaManager.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-MediaManager.lo `test -f 'MediaManager.cpp' || echo '$(srcdir)/'`MediaManager.cpp

libSPIN_la-ViewerManipulator.lo: ViewerManipulator.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-ViewerManipulator.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-ViewerManipulator.Tpo -c -o libSPIN_la-ViewerManipulator.lo `test -f 'ViewerManipulator.cpp' || echo '$(srcdir)/'`ViewerManipulator.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-ViewerManipulator.Tpo $(DEPDIR)/libSPIN_la-ViewerManipulator.Plo
#	source='ViewerManipulator.cpp' object='libSPIN_la-ViewerManipulator.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-ViewerManipulator.lo `test -f 'ViewerManipulator.cpp' || echo '$(srcdir)/'`ViewerManipulator.cpp

libSPIN_la-ReferencedNode.lo: ReferencedNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-ReferencedNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-ReferencedNode.Tpo -c -o libSPIN_la-ReferencedNode.lo `test -f 'ReferencedNode.cpp' || echo '$(srcdir)/'`ReferencedNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-ReferencedNode.Tpo $(DEPDIR)/libSPIN_la-ReferencedNode.Plo
#	source='ReferencedNode.cpp' object='libSPIN_la-ReferencedNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-ReferencedNode.lo `test -f 'ReferencedNode.cpp' || echo '$(srcdir)/'`ReferencedNode.cpp

libSPIN_la-ReferencedState.lo: ReferencedState.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-ReferencedState.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-ReferencedState.Tpo -c -o libSPIN_la-ReferencedState.lo `test -f 'ReferencedState.cpp' || echo '$(srcdir)/'`ReferencedState.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-ReferencedState.Tpo $(DEPDIR)/libSPIN_la-ReferencedState.Plo
#	source='ReferencedState.cpp' object='libSPIN_la-ReferencedState.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-ReferencedState.lo `test -f 'ReferencedState.cpp' || echo '$(srcdir)/'`ReferencedState.cpp

libSPIN_la-UserNode.lo: UserNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-UserNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-UserNode.Tpo -c -o libSPIN_la-UserNode.lo `test -f 'UserNode.cpp' || echo '$(srcdir)/'`UserNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-UserNode.Tpo $(DEPDIR)/libSPIN_la-UserNode.Plo
#	source='UserNode.cpp' object='libSPIN_la-UserNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-UserNode.lo `test -f 'UserNode.cpp' || echo '$(srcdir)/'`UserNode.cpp

libSPIN_la-GroupNode.lo: GroupNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-GroupNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-GroupNode.Tpo -c -o libSPIN_la-GroupNode.lo `test -f 'GroupNode.cpp' || echo '$(srcdir)/'`GroupNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-GroupNode.Tpo $(DEPDIR)/libSPIN_la-GroupNode.Plo
#	source='GroupNode.cpp' object='libSPIN_la-GroupNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-GroupNode.lo `test -f 'GroupNode.cpp' || echo '$(srcdir)/'`GroupNode.cpp

libSPIN_la-ShapeNode.lo: ShapeNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-ShapeNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-ShapeNode.Tpo -c -o libSPIN_la-ShapeNode.lo `test -f 'ShapeNode.cpp' || echo '$(srcdir)/'`ShapeNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-ShapeNode.Tpo $(DEPDIR)/libSPIN_la-ShapeNode.Plo
#	source='ShapeNode.cpp' object='libSPIN_la-ShapeNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-ShapeNode.lo `test -f 'ShapeNode.cpp' || echo '$(srcdir)/'`ShapeNode.cpp

libSPIN_la-ModelNode.lo: ModelNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-ModelNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-ModelNode.Tpo -c -o libSPIN_la-ModelNode.lo `test -f 'ModelNode.cpp' || echo '$(srcdir)/'`ModelNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-ModelNode.Tpo $(DEPDIR)/libSPIN_la-ModelNode.Plo
#	source='ModelNode.cpp' object='libSPIN_la-ModelNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-ModelNode.lo `test -f 'ModelNode.cpp' || echo '$(srcdir)/'`ModelNode.cpp

libSPIN_la-GridNode.lo: GridNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-GridNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-GridNode.Tpo -c -o libSPIN_la-GridNode.lo `test -f 'GridNode.cpp' || echo '$(srcdir)/'`GridNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-GridNode.Tpo $(DEPDIR)/libSPIN_la-GridNode.Plo
#	source='GridNode.cpp' object='libSPIN_la-GridNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-GridNode.lo `test -f 'GridNode.cpp' || echo '$(srcdir)/'`GridNode.cpp

libSPIN_la-LightSource.lo: LightSource.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-LightSource.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-LightSource.Tpo -c -o libSPIN_la-LightSource.lo `test -f 'LightSource.cpp' || echo '$(srcdir)/'`LightSource.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-LightSource.Tpo $(DEPDIR)/libSPIN_la-LightSource.Plo
#	source='LightSource.cpp' object='libSPIN_la-LightSource.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-LightSource.lo `test -f 'LightSource.cpp' || echo '$(srcdir)/'`LightSource.cpp

libSPIN_la-RayNode.lo: RayNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-RayNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-RayNode.Tpo -c -o libSPIN_la-RayNode.lo `test -f 'RayNode.cpp' || echo '$(srcdir)/'`RayNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-RayNode.Tpo $(DEPDIR)/libSPIN_la-RayNode.Plo
#	source='RayNode.cpp' object='libSPIN_la-RayNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-RayNode.lo `test -f 'RayNode.cpp' || echo '$(srcdir)/'`RayNode.cpp

libSPIN_la-Contour.lo: Contour.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-Contour.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-Contour.Tpo -c -o libSPIN_la-Contour.lo `test -f 'Contour.cpp' || echo '$(srcdir)/'`Contour.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-Contour.Tpo $(DEPDIR)/libSPIN_la-Contour.Plo
#	source='Contour.cpp' object='libSPIN_la-Contour.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-Contour.lo `test -f 'Contour.cpp' || echo '$(srcdir)/'`Contour.cpp

libSPIN_la-ConstraintsNode.lo: ConstraintsNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-ConstraintsNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-ConstraintsNode.Tpo -c -o libSPIN_la-ConstraintsNode.lo `test -f 'ConstraintsNode.cpp' || echo '$(srcdir)/'`ConstraintsNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-ConstraintsNode.Tpo $(DEPDIR)/libSPIN_la-ConstraintsNode.Plo
#	source='ConstraintsNode.cpp' object='libSPIN_la-ConstraintsNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-ConstraintsNode.lo `test -f 'ConstraintsNode.cpp' || echo '$(srcdir)/'`ConstraintsNode.cpp

libSPIN_la-PointerNode.lo: PointerNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-PointerNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-PointerNode.Tpo -c -o libSPIN_la-PointerNode.lo `test -f 'PointerNode.cpp' || echo '$(srcdir)/'`PointerNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-PointerNode.Tpo $(DEPDIR)/libSPIN_la-PointerNode.Plo
#	source='PointerNode.cpp' object='libSPIN_la-PointerNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-PointerNode.lo `test -f 'PointerNode.cpp' || echo '$(srcdir)/'`PointerNode.cpp

libSPIN_la-MeasurementNode.lo: MeasurementNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-MeasurementNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-MeasurementNode.Tpo -c -o libSPIN_la-MeasurementNode.lo `test -f 'MeasurementNode.cpp' || echo '$(srcdir)/'`MeasurementNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-MeasurementNode.Tpo $(DEPDIR)/libSPIN_la-MeasurementNode.Plo
#	source='MeasurementNode.cpp' object='libSPIN_la-MeasurementNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-MeasurementNode.lo `test -f 'MeasurementNode.cpp' || echo '$(srcdir)/'`MeasurementNode.cpp

libSPIN_la-AnimationNode.lo: AnimationNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-AnimationNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-AnimationNode.Tpo -c -o libSPIN_la-AnimationNode.lo `test -f 'AnimationNode.cpp' || echo '$(srcdir)/'`AnimationNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-AnimationNode.Tpo $(DEPDIR)/libSPIN_la-AnimationNode.Plo
#	source='AnimationNode.cpp' object='libSPIN_la-AnimationNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-AnimationNode.lo `test -f 'AnimationNode.cpp' || echo '$(srcdir)/'`AnimationNode.cpp

libSPIN_la-SwitchNode.lo: SwitchNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-SwitchNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-SwitchNode.Tpo -c -o libSPIN_la-SwitchNode.lo `test -f 'SwitchNode.cpp' || echo '$(srcdir)/'`SwitchNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-SwitchNode.Tpo $(DEPDIR)/libSPIN_la-SwitchNode.Plo
#	source='SwitchNode.cpp' object='libSPIN_la-SwitchNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-SwitchNode.lo `test -f 'SwitchNode.cpp' || echo '$(srcdir)/'`SwitchNode.cpp

libSPIN_la-TextNode.lo: TextNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-TextNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-TextNode.Tpo -c -o libSPIN_la-TextNode.lo `test -f 'TextNode.cpp' || echo '$(srcdir)/'`TextNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-TextNode.Tpo $(DEPDIR)/libSPIN_la-TextNode.Plo
#	source='TextNode.cpp' object='libSPIN_la-TextNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-TextNode.lo `test -f 'TextNode.cpp' || echo '$(srcdir)/'`TextNode.cpp

libSPIN_la-DSPNode.lo: DSPNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-DSPNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-DSPNode.Tpo -c -o libSPIN_la-DSPNode.lo `test -f 'DSPNode.cpp' || echo '$(srcdir)/'`DSPNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-DSPNode.Tpo $(DEPDIR)/libSPIN_la-DSPNode.Plo
#	source='DSPNode.cpp' object='libSPIN_la-DSPNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-DSPNode.lo `test -f 'DSPNode.cpp' || echo '$(srcdir)/'`DSPNode.cpp

libSPIN_la-SoundNode.lo: SoundNode.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-SoundNode.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-SoundNode.Tpo -c -o libSPIN_la-SoundNode.lo `test -f 'SoundNode.cpp' || echo '$(srcdir)/'`SoundNode.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-SoundNode.Tpo $(DEPDIR)/libSPIN_la-SoundNode.Plo
#	source='SoundNode.cpp' object='libSPIN_la-SoundNode.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-SoundNode.lo `test -f 'SoundNode.cpp' || echo '$(srcdir)/'`SoundNode.cpp

libSPIN_la-SoundSpace.lo: SoundSpace.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-SoundSpace.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-SoundSpace.Tpo -c -o libSPIN_la-SoundSpace.lo `test -f 'SoundSpace.cpp' || echo '$(srcdir)/'`SoundSpace.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-SoundSpace.Tpo $(DEPDIR)/libSPIN_la-SoundSpace.Plo
#	source='SoundSpace.cpp' object='libSPIN_la-SoundSpace.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-SoundSpace.lo `test -f 'SoundSpace.cpp' || echo '$(srcdir)/'`SoundSpace.cpp

libSPIN_la-Listener.lo: Listener.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-Listener.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-Listener.Tpo -c -o libSPIN_la-Listener.lo `test -f 'Listener.cpp' || echo '$(srcdir)/'`Listener.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-Listener.Tpo $(DEPDIR)/libSPIN_la-Listener.Plo
#	source='Listener.cpp' object='libSPIN_la-Listener.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-Listener.lo `test -f 'Listener.cpp' || echo '$(srcdir)/'`Listener.cpp

libSPIN_la-SoundConnection.lo: SoundConnection.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-SoundConnection.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-SoundConnection.Tpo -c -o libSPIN_la-SoundConnection.lo `test -f 'SoundConnection.cpp' || echo '$(srcdir)/'`SoundConnection.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-SoundConnection.Tpo $(DEPDIR)/libSPIN_la-SoundConnection.Plo
#	source='SoundConnection.cpp' object='libSPIN_la-SoundConnection.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-SoundConnection.lo `test -f 'SoundConnection.cpp' || echo '$(srcdir)/'`SoundConnection.cpp

libSPIN_la-VideoTexture.lo: VideoTexture.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-VideoTexture.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-VideoTexture.Tpo -c -o libSPIN_la-VideoTexture.lo `test -f 'VideoTexture.cpp' || echo '$(srcdir)/'`VideoTexture.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-VideoTexture.Tpo $(DEPDIR)/libSPIN_la-VideoTexture.Plo
#	source='VideoTexture.cpp' object='libSPIN_la-VideoTexture.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-VideoTexture.lo `test -f 'VideoTexture.cpp' || echo '$(srcdir)/'`VideoTexture.cpp

libSPIN_la-SharedVideoTexture.lo: SharedVideoTexture.cpp
	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libSPIN_la-SharedVideoTexture.lo -MD -MP -MF $(DEPDIR)/libSPIN_la-SharedVideoTexture.Tpo -c -o libSPIN_la-SharedVideoTexture.lo `test -f 'SharedVideoTexture.cpp' || echo '$(srcdir)/'`SharedVideoTexture.cpp
	$(am__mv) $(DEPDIR)/libSPIN_la-SharedVideoTexture.Tpo $(DEPDIR)/libSPIN_la-SharedVideoTexture.Plo
#	source='SharedVideoTexture.cpp' object='libSPIN_la-SharedVideoTexture.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libSPIN_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libSPIN_la-SharedVideoTexture.lo `test -f 'SharedVideoTexture.cpp' || echo '$(srcdir)/'`SharedVideoTexture.cpp

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS)
install-binPROGRAMS: install-libLTLIBRARIES

installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS install-libLTLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-libLTLIBRARIES

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libLTLIBRARIES clean-libtool ctags \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-libLTLIBRARIES \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS uninstall-libLTLIBRARIES


#spin_SOURCES = spinWX.cpp wxSpinMain.cpp wxSpinEditor.cpp wxSpinRenderer.cpp \
#      wxSpinPropGrid.cpp wxSpinSettings.cpp wxSpinTreeVisitor.cpp \
#      wxSpinTreeCtrl.cpp
#spin_LDADD = libSPIN

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
