// ===================================================================
// Audioscape library for PureData
// Copyright (c) 2007
//
// Collaborators:
//    Shared Reality Lab (SRE), McGill University Centre for Intelligent Machines (CIM)
//       www.cim.mcgill.ca/sre
//    La Société des Arts Technologiques (SAT)
//       www.sat.qc.ca
//
// Project Directors:
//    Science - Jeremy R. Cooperstock (SRE/CIM)
//    Arts - Zack Settel
//
// Conception:
//    Zack Settel
//
// Development Team:
//    Mike Wozniewski (SRE/CIM): Researcher, Head Developer
//    Zack Settel: Artist, Researcher, Audio/DSP programming
//    Jean-Michel Dumas (SAT): Assistant Researcher
//    Mitchel Benovoy (SRE/CIM): Video Texture Programming
//    Stéphane Pelletier (SRE/CIM): Video Texture Programming
//    Pierre-Olivier Charlebois (SRE/CIM): Former Developer
//
// Funding by / Souventionné par:
//    Natural Sciences and Engineering Research Council of Canada (NSERC)
//    Canada Council for the Arts
//    NSERC/Canada Council for the Arts - New Media Initiative
//
// ===================================================================
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
// ===================================================================


#ifndef __SS_CONNECTION_H
#define __SS_CONNECTION_H

#include "asGlobals.h"
#include "asNode.h"
#include "asSoundNode.h"
#include "asSoundSpace.h"

enum connectionType { NORMAL, NODE_TO_SPACE, SPACE_TO_NODE };

class asSoundSpace;
class asSoundNode;

class asConnection
{
 
	public:
		asConnection(osg::ref_ptr<asSoundNode> src, osg::ref_ptr<asSoundNode> snk);
		~asConnection();
		
		void resetAtomList();
		void updateSharedSpaces();
		
		void computeWorldMatrices();
		void computeDistance();
		void computeRolloff();
		void computeSeparation();
		
		//void computeAttenuation();
		//void defaultAttenuation();
		//void soundSpaceAttenuation();
		
		void setThru (t_floatarg newvalue);
		void setDistanceEffect (t_floatarg newvalue);
		void setRolloffEffect (t_floatarg newvalue);
		void setDopplerEffect (t_floatarg newvalue);
		void setDiffractionEffect (t_floatarg newvalue);
		void setProximityEffect (t_floatarg newvalue);
		void setHeadEffect (t_floatarg newvalue);
		
		// ************
		
		// These are pointers to the nodes for this connection:
		osg::ref_ptr<asSoundNode> src_as_node, snk_as_node;
		osg::ref_ptr<asSoundSpace> src_as_space, snk_as_space;
	
		osg::Matrix srcMatrix, snkMatrix;
		
		// The connectionType helps us to know what derived class the source and
		// sink are actually defined as:
		int connectionType;
		
		// The connection vector is maintained for convenience, and is shared between
		// functions. It is set by the computeDistance() function, which should hence
		// be called by any other functions that require this variable. Also note that
		// this variable needs to be updated every time that the source or sink changes
		// position.
		osg::Vec3 connection_vector;
		
		// A list of spaces that the source and sink are both connected to:
		std::vector< osg::ref_ptr<asSoundSpace> > sharedSpaces;
		
		// For connections between a space and node, we keep track of whether the node
		// is within the contour of the space or not:
		t_float isInside;
		
		// For connections between two soundNodes, we keep track of whether they are
		// separated by the boundary of one or more spaces. We also keep the name of
		// at least one "occludingSpace":
		t_float isSeparated;
		t_symbol *occludingSpace;
		
		// Computed incidence values:
		t_float srcIncidence, srcIncidenceAzim, srcIncidenceElev;
		t_float snkIncidence, snkIncidenceAzim, snkIncidenceElev;
		
		// Computed scalars:
		t_float distanceScaler;
		t_float rolloffScaler;
		
		// We store a whole list of atoms so we don't waste time allocating memory
		// during each computation:
		//t_atom *output_atoms;
		
		// pointer to master connection (if this is a slave)
		asConnection *masterConnection;
		
		// *********
		
		// The modifiable parameters of the connection (allows for bending the rules
		// of physical modelling):
		bool thru;
		t_float distanceEffect;
		t_float rolloffEffect;
		t_float dopplerEffect;
		t_float diffractionEffect;
		t_float proximityEffect;
		t_float headEffect;

};

#endif
