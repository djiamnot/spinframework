// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <cppintrospection/ReflectionMacros>
#include <cppintrospection/TypedMethodInfo>
#include <cppintrospection/StaticMethodInfo>
#include <cppintrospection/Attributes>

#include <spinBaseContext.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ENUM_REFLECTOR(spinBaseContext::SpinContextMode)
	I_DeclaringFile("spinBaseContext.h");
	I_EnumLabel(spinBaseContext::SERVER_MODE);
	I_EnumLabel(spinBaseContext::CLIENT_MODE);
END_REFLECTOR

BEGIN_ABSTRACT_OBJECT_REFLECTOR(spinBaseContext)
	I_DeclaringFile("spinBaseContext.h");
	I_Constructor0(____spinBaseContext,
	               "",
	               "Constructor.This is where the actual default port numbers and multicast groups are defined. ");
	I_Method0(bool, isServer,
	          Properties::NON_VIRTUAL,
	          __bool__isServer,
	          "",
	          "");
	I_Method0(bool, start,
	          Properties::PURE_VIRTUAL,
	          __bool__start,
	          "",
	          "");
	I_Method1(bool, startThread, IN, void *(*)(void *), threadFunction,
	          Properties::NON_VIRTUAL,
	          __bool__startThread__void_P1(P1)(void_P1),
	          "",
	          "Starts the context thread (passed as *threadFunction from a derived class)Startup point of the server's thread. ");
	I_Method0(void, stop,
	          Properties::NON_VIRTUAL,
	          __void__stop,
	          "",
	          "Stops the currently running thread ");
	I_Method0(bool, isRunning,
	          Properties::NON_VIRTUAL,
	          __bool__isRunning,
	          "",
	          "");
	I_StaticMethod1(void, sigHandler, IN, int, signum,
	                __void__sigHandler__int_S,
	                "",
	                "Signal handler.Called, for example, when the user presses Control-C ");
	I_StaticMethod6(int, connectionCallback, IN, const char *, path, IN, const char *, types, IN, lo_arg **, argv, IN, int, argc, IN, void *, data, IN, void *, user_data,
	                __int__connectionCallback__C5_char_P1__C5_char_P1__lo_arg_P1P1__int__void_P1__void_P1_S,
	                "",
	                "");
	I_StaticMethod6(int, nodeCallback, IN, const char *, path, IN, const char *, types, IN, lo_arg **, argv, IN, int, argc, IN, void *, data, IN, void *, user_data,
	                __int__nodeCallback__C5_char_P1__C5_char_P1__lo_arg_P1P1__int__void_P1__void_P1_S,
	                "",
	                "Callback for messages sent to a node in the scene graph.Messages to node should have an OSC address in the form /SPIN/<scene id>=\"\">/<node id>=\"\"> Their first argument is the name of the method to call.Methods to manage Python scripts for a node: addCronScript <label> <path> <frequency>addEventScript <label> <event> <path> [*args...]enableCronScript <label>removeCronScript <label>enableEventScript <label>removeEventScript <label> We use C++ introspection to figure out the other methods that can be called for a given node. ");
	I_StaticMethod6(int, sceneCallback, IN, const char *, path, IN, const char *, types, IN, lo_arg **, argv, IN, int, argc, IN, void *, data, IN, void *, user_data,
	                __int__sceneCallback__C5_char_P1__C5_char_P1__lo_arg_P1P1__int__void_P1__void_P1_S,
	                "",
	                "Callback for the OSC message to the whole scene.The address of the OSC messages sent to the scene are in the form /SPIN/<scene id>=\"\"> <method name>=\"\"> [args...]They are used mostly to delete all nodes from a scene, or to ask the server to refresh the information about all nodes. It's also possible to save the current scene graph to an XML file, and to load a previously saved XML file.Some valid method include: clearclearUsersclearStatesuserRefreshrefreshrefreshSubscribersgetNodeListnodeList [node names...] : Creates many nodesstateList [] : Creates many state setsexportScene [] []load [XML file]save [XML file]saveAll [XML file]saveUsers [XML file]createNode [node name] [node type]createStateSet [name] [type]deleteNode [name]deleteGraph [name]  ");
	I_StaticMethod6(int, logCallback, IN, const char *, path, IN, const char *, types, IN, lo_arg **, argv, IN, int, argc, IN, void *, data, IN, void *, user_data,
	                __int__logCallback__C5_char_P1__C5_char_P1__lo_arg_P1P1__int__void_P1__void_P1_S,
	                "",
	                "");
	I_StaticMethod6(int, debugCallback, IN, const char *, path, IN, const char *, types, IN, lo_arg **, argv, IN, int, argc, IN, void *, data, IN, void *, user_data,
	                __int__debugCallback__C5_char_P1__C5_char_P1__lo_arg_P1P1__int__void_P1__void_P1_S,
	                "",
	                "");
	I_StaticMethod3(void, oscParser_error, IN, int, num, IN, const char *, msg, IN, const char *, path,
	                __void__oscParser_error__int__C5_char_P1__C5_char_P1_S,
	                "",
	                "");
	I_ProtectedMethod1(void, setLog, IN, spinLog &, log,
	                   Properties::NON_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__setLog__spinLog_R1,
	                   "",
	                   "");
	I_ProtectedMethod0(void, createServers,
	                   Properties::PURE_VIRTUAL,
	                   Properties::NON_CONST,
	                   __void__createServers,
	                   "this method is used by both spinClientContext and spinServerContext ",
	                   "");
	I_PublicMemberProperty(std::vector< lo_address >, lo_rxAddrs_);
	I_PublicMemberProperty(std::vector< lo_server >, lo_rxServs_);
	I_PublicMemberProperty(lo_address, lo_txAddr);
	I_PublicMemberProperty(lo_address, lo_infoAddr);
	I_PublicMemberProperty(lo_address, lo_syncAddr);
	I_PublicMemberProperty(lo_server, lo_infoServ_);
	I_PublicMemberProperty(lo_server, lo_tcpRxServer_);
END_REFLECTOR

