// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <cppintrospection/ReflectionMacros>
#include <cppintrospection/TypedMethodInfo>
#include <cppintrospection/StaticMethodInfo>
#include <cppintrospection/Attributes>

#include <SceneManager.h>
#include <SharedVideoNode.h>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_OBJECT_REFLECTOR(SharedVideoNode)
	I_DeclaringFile("SharedVideoNode.h");
	I_BaseType(ShapeNode);
	I_Constructor2(IN, SceneManager *, sceneManager, IN, char *, initID,
	               ____SharedVideoNode__SceneManager_P1__char_P1,
	               "",
	               "");
	I_Method0(void, callbackUpdate,
	          Properties::VIRTUAL,
	          __void__callbackUpdate,
	          "",
	          "For nodes that require regular programmatic control, there is a callback that is evaluated with every refresh. This function can thus be used for animations, or any other periodic updates.Note that changes to the scene graph structure (eg, moving/deleting nodes should NOT be done within this callback because traversals stacks will become corrupted. The technique is rather to enable a flag and then do the actual change in the SceneManager::updateGraph() method. ");
	I_Method0(void, consumeFrame,
	          Properties::NON_VIRTUAL,
	          __void__consumeFrame,
	          "This function is executed in the worker thread. ",
	          "");
	I_Method0(void, signalKilled,
	          Properties::NON_VIRTUAL,
	          __void__signalKilled,
	          "",
	          "");
	I_Method1(void, setHost, IN, const char *, newvalue,
	          Properties::VIRTUAL,
	          __void__setHost__C5_char_P1,
	          "",
	          "");
	I_Method1(void, setTextureID, IN, const char *, id,
	          Properties::NON_VIRTUAL,
	          __void__setTextureID__C5_char_P1,
	          "",
	          "");
	I_Method0(const char *, getTextureID,
	          Properties::NON_VIRTUAL,
	          __C5_char_P1__getTextureID,
	          "",
	          "");
	I_Method0(std::vector< lo_message >, getState,
	          Properties::VIRTUAL,
	          __std_vectorT1_lo_message___getState,
	          "",
	          "For each subclass of ReferencedNode, we override the getState() method to fill the vector with the correct set of methods for this particular node ");
	I_SimpleProperty(const char *, Host, 
	                 0, 
	                 __void__setHost__C5_char_P1);
	I_SimpleProperty(std::vector< lo_message >, State, 
	                 __std_vectorT1_lo_message___getState, 
	                 0);
	I_SimpleProperty(const char *, TextureID, 
	                 __C5_char_P1__getTextureID, 
	                 __void__setTextureID__C5_char_P1);
END_REFLECTOR

